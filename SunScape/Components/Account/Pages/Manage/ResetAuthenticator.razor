@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>@Localizer["Reset authenticator key"]</PageTitle>

<StatusMessage />
<h3>@Localizer["Reset authenticator key"]</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>@Localizer["If you reset your authenticator key your authenticator app will not work until you reconfigure it."]</strong>
    </p>
    <p>
        @Localizer["This process disables 2FA until you verify your authenticator app."]<br />
        @Localizer["If you do not complete your authenticator app configuration you may lose access to your account."]
    </p>
</div>
<div>
    <EditForm FormName="reset-authenticator" OnValidSubmit="OnSubmitAsync" Model="this">
        <button class="btn btn-danger" type="submit">@Localizer["Reset authenticator key"]</button>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            Localizer["Your authenticator app key has been reset, you will need to configure your authenticator app using the new key."],
            HttpContext);
    }
}
